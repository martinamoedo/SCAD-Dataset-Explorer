import streamlit as st
from streamlit_option_menu import option_menu
import pandas as pd
import plotly.express as px
from pathlib import Path
import os

# =====================================================================================
# CSS PERSONALIZADO
# =====================================================================================
st.markdown("""
<style>

/* ====== Fondos principales ====== */

/* Fondo del √°rea principal (contenido) */
div[data-testid="stAppViewContainer"]{
  background-color: #f9f9f9;   /* gris muy suave para resaltar gr√°ficos */
}

/* Fondo del sidebar */
aside[data-testid="stSidebar"]{
  background-color: #b1c7df;   /* azul gris√°ceo de la paleta */
}

/* Panel interno de tarjetas en el sidebar (donde est√° el option_menu) */
aside[data-testid="stSidebar"] .block-container{
  padding-top: 1rem;
  padding-bottom: 1rem;
}

/* ====== Navegaci√≥n (streamlit-option-menu) ======
   La librer√≠a usa clases bootstrap-like: .nav, .nav-pills, .nav-link, .active
   Estas reglas se aplican de forma robusta dentro del sidebar.
================================================== */

/* Bot√≥n activo */
aside[data-testid="stSidebar"] .nav-pills .nav-link.active{
  background-color: #f0635e !important;  /* rojo coral de la paleta */
  color: #ffffff !important;
  font-weight: 700;
  border-radius: 10px;
  box-shadow: 0 0 0 1px rgba(0,0,0,0.05) inset;
}

/* Bot√≥n normal */
aside[data-testid="stSidebar"] .nav-pills .nav-link{
  color: #122b39;                 /* texto oscuro legible */
  background-color: #ffffff;      /* pastilla blanca */
  border-radius: 10px;
  margin-bottom: 8px;
  border: 1px solid rgba(0,0,0,0.06);
  transition: all 0.2s ease-in-out;
}

/* Hover */
aside[data-testid="stSidebar"] .nav-pills .nav-link:hover{
  background-color: #23b7d9 !important;  /* cyan */
  color: #ffffff !important;
  border-color: transparent;
}

/* Iconos dentro del option menu */
aside[data-testid="stSidebar"] .nav-pills .nav-link svg{
  margin-right: .35rem;
}

/* ====== M√©tricas (KPI) ====== */
div[data-testid="stMetricValue"]{
  color: #1d7084;  /* teal para valores */
  font-weight: 600;
}
div[data-testid="stMetricLabel"]{
  color: #4a5b6b;  /* gris oscuro */
  font-size: 0.9rem;
}

/* ====== Peque√±os detalles ====== */
header[data-testid="stHeader"]{
  background: transparent;   /* elimina barra superior gris */
  box-shadow: none;
}
</style>
""", unsafe_allow_html=True)


# =====================================================================================
# Configuraci√≥n de la p√°gina
# =====================================================================================
st.set_page_config(page_title="SCAD Dataset Explorer", page_icon="üåç", layout="wide")

# Estado global
if "df" not in st.session_state:
    st.session_state.df = None

# =====================================================================================
# CARGA DE DATOS (cacheada)
# =====================================================================================
@st.cache_data(show_spinner=True)
def load_data(path: Path) -> pd.DataFrame:
    # Lee CSV
    df = pd.read_csv(path)

    # Normaliza columnas
    df.columns = df.columns.str.strip()

    # Detecta columna de a√±o
    year_col_candidates = [c for c in df.columns if "year" in c.lower() or "a√±o" in c.lower()]
    if not year_col_candidates:
        st.error("‚ùå No se encontr√≥ ninguna columna que parezca contener el a√±o.")
        st.stop()
    year_col = year_col_candidates[0]
    if year_col != "year":
        df = df.rename(columns={year_col: "year"})

    # Conversi√≥n a num√©rico
    df["year"] = pd.to_numeric(df["year"], errors="coerce")

    # ndeath puede no existir en algunos SCAD
    if "ndeath" not in df.columns:
        if "fatalities" in df.columns:
            df["ndeath"] = pd.to_numeric(df["fatalities"], errors="coerce")
        else:
            df["ndeath"] = pd.NA

    df["ndeath"] = pd.to_numeric(df["ndeath"], errors="coerce")

    return df

# Ruta del dataset
DATA_PATH = Path("exploratory_data") / "scad_final_dataset.csv"

# Intenta cargar al inicio (si existe)
if DATA_PATH.exists():
    st.session_state.df = load_data(DATA_PATH)

# =====================================================================================
# Encabezado principal
# =====================================================================================
st.title("üåç SCAD Dataset Explorer")
st.markdown("### An√°lisis de conflictos sociales en √Åfrica y Am√©rica Latina (1990‚Äì2018)")

# =====================================================================================
# Sidebar navegaci√≥n
# =====================================================================================
with st.sidebar:
    st.markdown("## Navegaci√≥n")
    selected = option_menu(
        menu_title=None,
        options=[
            "Inicio",
            "Explorador de Eventos",
            "Explorador de Muertes",
            "Estad√≠sticas Generales",
            "An√°lisis por Religi√≥n",
            "Conclusiones"
        ],
        icons=["house", "map", "x-circle", "bar-chart", "building", "check2-circle"],
        default_index=0
    )

# =====================================================================================
# 1. PESTA√ëA INICIO
# =====================================================================================
if selected == "Inicio":
    st.header("Inicio")
    st.write("Bienvenido. Usa las pesta√±as de abajo para explorar el contexto del proyecto.")

    tabs = st.tabs([
        "üìù Descripci√≥n",
        "üéØ Objetivos",
        "üóÇÔ∏è Datos",
        "üìö Codebooks",
        "üß™ Metodolog√≠a",
        "‚ÑπÔ∏è Notas/Cr√©ditos"
    ])

    # --- Descripci√≥n ---
    with tabs[0]:
        st.subheader("Descripci√≥n")
        st.markdown(
            """
            Hemos llevado a cabo un **proyecto de investigaci√≥n y desarrollo** basado en los datos del 
            **[SCAD Dataset Explorer](https://www.strausscenter.org/ccaps-research-areas/social-conflict/database/)**, 
            recopilando informaci√≥n detallada de **√Åfrica** y **Am√©rica Latina**.  
            
            Nuestro prop√≥sito ha sido **analizar los conflictos sociales registrados entre 1990 y 2018**, 
            considerando variables como el tipo de evento, los actores implicados, la localizaci√≥n geogr√°fica y el n√∫mero de v√≠ctimas.  
            Este trabajo se enmarca dentro de un inter√©s por comprender mejor la din√°mica de los conflictos en diferentes contextos 
            pol√≠ticos, sociales y culturales.

            A partir de esta recopilaci√≥n y an√°lisis, hemos desarrollado una **aplicaci√≥n funcional e interactiva** que facilita:  
            - La exploraci√≥n de los datos en m√∫ltiples dimensiones.  
            - La generaci√≥n de visualizaciones din√°micas que permiten identificar patrones y tendencias.  
            - La comparaci√≥n entre pa√≠ses y regiones de forma accesible.  
            
            Con esta herramienta buscamos **poner a disposici√≥n de investigadores, estudiantes y p√∫blico general** 
            un entorno en el cual los resultados puedan ser consultados y comprendidos de manera intuitiva.  
            Creemos que la **interactividad** y la **transparencia de los datos** son aspectos clave para fomentar una reflexi√≥n cr√≠tica 
            y constructiva en torno a los conflictos sociales en ambas regiones.
            
            En definitiva, el proyecto no solo constituye un ejercicio de an√°lisis de datos, sino tambi√©n una 
            **iniciativa orientada a la difusi√≥n del conocimiento**, al ofrecer una plataforma abierta que permita observar 
            y comprender los resultados de manera directa.
            """
        )

        # --- Objetivos ---
    # --- Objetivos ---
    with tabs[1]:
        st.subheader("Objetivos")
        st.markdown(
            """
            En el marco de este proyecto nos hemos propuesto una serie de **objetivos estrat√©gicos** 
            orientados a garantizar la calidad de los datos, la robustez de los an√°lisis y la utilidad pr√°ctica de los resultados.  
            Desde una perspectiva de **Data Engineering**, **Data Analysis** y **Data Visualization**, nuestros objetivos son los siguientes:

            1. **Construir una arquitectura de datos s√≥lida**, asegurando procesos de limpieza, normalizaci√≥n y estandarizaci√≥n, 
            con el fin de minimizar inconsistencias y errores que puedan afectar el an√°lisis posterior.  
            2. **Implementar procedimientos de *Feature Engineering*** que permitan enriquecer los datos originales mediante 
            la creaci√≥n de nuevas variables, transformaciones relevantes y codificaciones adecuadas para capturar relaciones no triviales.  
            3. **Realizar un *Exploratory Data Analysis (EDA)* exhaustivo**, aplicando t√©cnicas estad√≠sticas y visuales 
            que faciliten la comprensi√≥n de patrones, distribuciones y anomal√≠as en los datos antes de los an√°lisis avanzados.  
            4. **Desarrollar visualizaciones comprensibles y est√©ticamente cuidadas**, orientadas a un p√∫blico general, 
            empleando una **paleta de colores adecuada** para cada contexto y garantizando la correcta interpretaci√≥n 
            de los hallazgos sin sobrecargar la informaci√≥n.  
            5. **Dise√±ar dashboards interactivos y modulares** que permitan explorar din√°micamente las distintas dimensiones 
            de los conflictos (espaciales, temporales y tem√°ticos), ofreciendo flexibilidad para distintos perfiles de usuarios.  
            6. **Crear una aplicaci√≥n funcional e interactiva**, con una experiencia de usuario fluida y accesible, 
            que permita la exploraci√≥n de resultados en tiempo real y la consulta de m√©tricas clave desde m√∫ltiples perspectivas.  
            7. **Asegurar buenas pr√°cticas de ingenier√≠a de datos**, incluyendo validaci√≥n de consistencia, documentaci√≥n, 
            versionado de datasets y trazabilidad de transformaciones, con el fin de garantizar la reproducibilidad.  
            8. **Promover la accesibilidad y la transparencia**, asegurando que los datos y resultados puedan ser utilizados 
            tanto por investigadores especializados como por usuarios sin formaci√≥n t√©cnica, contribuyendo as√≠ a la 
            democratizaci√≥n del conocimiento.  

            Con ello buscamos consolidar una plataforma que integre **rigurosidad metodol√≥gica**, **calidad en el tratamiento de datos**, 
            **profundidad anal√≠tica** y **excelencia en la comunicaci√≥n visual**, ofreciendo un equilibrio entre la 
            precisi√≥n t√©cnica y la claridad divulgativa.
            """
        )

        # --- Datos ---
    with tabs[2]:
        st.subheader("Datos")
        st.markdown(
            """
            Los datos utilizados en este proyecto provienen del 
            **[Social Conflict Analysis Database (SCAD)](https://www.strausscenter.org/ccaps-research-areas/social-conflict/database/)**, 
            un repositorio de referencia en el estudio de conflictos sociales.  

            **Citaci√≥n recomendada:**  
            Salehyan, Idean, Cullen S. Hendrix, Jesse Hamner, Christina Case, Christopher Linebarger, Emily Stull, and Jennifer Williams.  
            *‚ÄúSocial conflict in Africa: A new database.‚Äù* International Interactions 38, no. 4 (2012): 503‚Äì511.  

            ---

            A partir de los datos en bruto disponibles en la fuente original, hemos llevado a cabo un proceso de **transformaci√≥n y 
            normalizaci√≥n exhaustivo**, orientado a:  
            - Estandarizar formatos de fechas, nombres de pa√≠ses y divisiones administrativas.  
            - Controlar valores faltantes y posibles duplicados.  
            - Integrar los distintos subconjuntos en un **√∫nico dataset consolidado**.  
            - Definir una estructura de columnas s√≥lida y coherente para su posterior manipulaci√≥n y an√°lisis.  

            El resultado de este proceso es un **dataset √∫nico y completo** que concentra toda la informaci√≥n necesaria para los an√°lisis 
            posteriores, con un formato estandarizado y de f√°cil manipulaci√≥n.  

            Cabe destacar que, aunque se han aplicado transformaciones t√©cnicas para garantizar la calidad y consistencia de los datos, 
            hemos procurado **mantener los registros lo m√°s fieles posible a la fuente original**, evitando alteraciones que pudieran 
            modificar la naturaleza o los resultados de los an√°lisis.

            ---

            A continuaci√≥n se muestra una vista preliminar del dataset final:
            """
        )

        if st.session_state.df is not None:
            st.dataframe(st.session_state.df.head(20), use_container_width=True)

            # Bot√≥n para descargar el dataset directamente desde la app
            st.download_button(
                label="üíæ Descargar dataset consolidado (CSV)",
                data=st.session_state.df.to_csv(index=False).encode("utf-8"),
                file_name="scad_final_dataset.csv",
                mime="text/csv"
            )
        else:
            st.warning(
                "‚ö†Ô∏è No se han cargado datos. Utiliza la opci√≥n de carga r√°pida en esta secci√≥n o aseg√∫rate de que "
                "el archivo `scad_final_dataset.csv` est√© disponible en la carpeta `exploratory_data`."
            )


    # --- Codebooks ---
    with tabs[3]:
        st.subheader("Codebooks")
        st.markdown(
            """
            Los **codebooks** (libros de c√≥digos) son documentos esenciales en cualquier proyecto de an√°lisis de datos, 
            ya que **definen y documentan** con precisi√≥n cada variable incluida en el dataset.  
            En ellos se especifica el **nombre de la variable**, su **significado**, el **tipo de dato**, los **valores permitidos**, 
            las **unidades de medida**, las **reglas de codificaci√≥n** y las **notas metodol√≥gicas** que orientan su correcta interpretaci√≥n.  

            ### ¬øPara qu√© se utilizan?
            - Para **interpretar correctamente** los datos y evitar errores de an√°lisis.  
            - Para **garantizar la reproducibilidad**, facilitando que cualquier analista pueda replicar los resultados.  
            - Para **alinear criterios** entre equipos de trabajo (data engineers, data analysts, cient√≠ficos sociales), 
            asegurando consistencia en la manipulaci√≥n y uso de la informaci√≥n.  
            - Para **estandarizar procesos** de limpieza, transformaci√≥n y an√°lisis en proyectos colaborativos.  

            ### ¬øPor qu√© es importante leerlos y comprenderlos?
            - Ayudan a **detectar y prevenir errores de interpretaci√≥n**, por ejemplo en variables categ√≥ricas o en escalas invertidas.  
            - Permiten dise√±ar procesos de **feature engineering** m√°s s√≥lidos, al contar con el contexto completo de cada campo.  
            - Son clave para un **EDA (Exploratory Data Analysis)** riguroso, asegurando que las estad√≠sticas y visualizaciones 
            reflejen la realidad de los datos.  
            - Garantizan que las **visualizaciones y modelos anal√≠ticos** comuniquen lo que realmente representan las variables, 
            evitando conclusiones err√≥neas.  

            ### Codebooks oficiales
            Los codebooks oficiales del SCAD est√°n disponibles en la p√°gina del  
            **[SCAD Dataset Explorer](https://www.strausscenter.org/ccaps-research-areas/social-conflict/database/)**.  
            No obstante, para facilitar el acceso y la consulta, en esta aplicaci√≥n hemos incluido la posibilidad de 
            **descargarlos directamente** en formato PDF.
            """
        )

        from pathlib import Path

        CODEBOOK_DIR = Path("codebooks")  # <- carpeta dentro del repo o proyecto
        pdfs = list(CODEBOOK_DIR.glob("*.pdf")) if CODEBOOK_DIR.exists() else []

        if pdfs:
            st.markdown("#### Descarga directa de Codebooks (PDF)")
            for pdf in pdfs:
                with open(pdf, "rb") as fh:
                    st.download_button(
                        label=f"‚¨áÔ∏è Descargar {pdf.name}",
                        data=fh.read(),
                        file_name=pdf.name,
                        mime="application/pdf"
                    )
        else:
            st.info(
                "‚ö†Ô∏è Los codebooks no est√°n disponibles en la carpeta del proyecto. "
                "Puedes consultarlos directamente en la p√°gina oficial del SCAD."
            )

        # --- Metodolog√≠a ---
        # --- Metodolog√≠a ---
    with tabs[4]:
        st.subheader("Metodolog√≠a")
        st.markdown(
            """
            La metodolog√≠a aplicada en este proyecto sigue un enfoque sistem√°tico propio de la **ingenier√≠a y el an√°lisis de datos**, 
            garantizando la calidad, consistencia y utilidad del dataset resultante.  

            El proceso ha sido dise√±ado en etapas secuenciales, siguiendo las buenas pr√°cticas utilizadas por **Data Engineers** y 
            **Data Analysts** en proyectos de anal√≠tica avanzada:

            1. **Ingesta de datos**  
            - Recolecci√≥n de los ficheros originales publicados por el SCAD.  
            - Verificaci√≥n de integridad de los registros y formatos de origen.  

            2. **Limpieza y normalizaci√≥n**  
            - Estandarizaci√≥n de nombres de pa√≠ses, divisiones administrativas y fechas.  
            - Control de valores faltantes y duplicados.  
            - Conversi√≥n de tipos de datos (num√©ricos, categ√≥ricos, temporales).  

            3. **Feature Engineering**  
            - Creaci√≥n de variables derivadas (por ejemplo, n√∫mero total de muertes normalizadas, clasificaci√≥n de eventos).  
            - Codificaci√≥n de categor√≠as y generaci√≥n de atributos adicionales para enriquecer el an√°lisis.  

            4. **Exploratory Data Analysis (EDA)**  
            - Identificaci√≥n de patrones, outliers y distribuciones de inter√©s.  
            - Validaci√≥n de supuestos metodol√≥gicos antes de aplicar an√°lisis descriptivos y visualizaciones.  

            5. **Consolidaci√≥n en un dataset √∫nico**  
            - Integraci√≥n de los distintos subconjuntos de datos en un √∫nico fichero estructurado.  
            - Validaci√≥n de consistencia entre columnas clave (`event_type`, `country`, `year`, etc.).  

            6. **Visualizaci√≥n y comunicaci√≥n**  
            - Dise√±o de gr√°ficos interactivos y m√©tricas agregadas.  
            - Selecci√≥n de paletas de colores comprensibles y accesibles para el p√∫blico general.  

            7. **Despliegue en aplicaci√≥n interactiva**  
            - Implementaci√≥n de una aplicaci√≥n funcional que facilita la exploraci√≥n de los datos.  
            - Accesibilidad para investigadores, estudiantes y usuarios no t√©cnicos.  

            En conjunto, esta metodolog√≠a permite asegurar que los datos sean **fiables, reproducibles y √∫tiles** para distintos tipos de an√°lisis.
            """
        )

        with st.expander("üìå Buenas pr√°cticas y recomendaciones"):
            st.markdown(
                """
                Como especialistas en ingenier√≠a y an√°lisis de datos, recomendamos tener en cuenta las siguientes 
                buenas pr√°cticas al trabajar con datasets complejos como SCAD:

                - **Gobernanza de datos**: documentar fuentes, versiones y transformaciones aplicadas.  
                - **Reproducibilidad**: mantener scripts y notebooks versionados (Git) que permitan replicar cada paso.  
                - **Validaci√≥n continua**: aplicar controles de calidad en cada fase (conteo de registros, consistencia de claves).  
                - **Automatizaci√≥n**: dise√±ar pipelines de ingesta y transformaci√≥n escalables, evitando procesos manuales repetitivos.  
                - **EDA riguroso**: realizar un an√°lisis exploratorio antes de generar m√©tricas o visualizaciones definitivas.  
                - **Feature Engineering responsable**: crear variables √∫tiles, pero siempre documentando su significado y supuestos.  
                - **Visualizaciones accesibles**: emplear gr√°ficos claros, con etiquetas y colores comprensibles incluso para usuarios no expertos.  
                - **Seguridad y privacidad**: manejar los datos con criterios √©ticos, respetando licencias y citando adecuadamente la fuente.  
                - **Transparencia**: publicar codebooks, definiciones y criterios metodol√≥gicos para facilitar el entendimiento a toda la comunidad.  

                Estas pr√°cticas aseguran que los resultados no solo sean correctos desde el punto de vista t√©cnico, 
                sino tambi√©n **comprensibles, reproducibles y de valor para la toma de decisiones**.
                """
            )

    # --- Notas/Cr√©ditos ---
    with tabs[5]:
        st.subheader("Notas / Cr√©ditos")
        st.markdown(
            """
            ### Autores
            - **Diego Rubianes Sousa**  
            - **Mart√≠n Amoedo Carbajal**

            ### Agradecimientos
            Queremos agradecer al equipo del **[Strauss Center for International Security and Law](https://www.strausscenter.org/)** 
            por la recopilaci√≥n, mantenimiento y publicaci√≥n del **SCAD Dataset**, sin el cual este proyecto no habr√≠a sido posible.  

            Asimismo, reconocemos el trabajo de la comunidad acad√©mica y profesional en el √°mbito de la **ingenier√≠a de datos** 
            y el **an√°lisis de conflictos**, cuyos enfoques y metodolog√≠as han inspirado el dise√±o de esta aplicaci√≥n.

            ### Referencias
            - Salehyan, Idean, Cullen S. Hendrix, Jesse Hamner, Christina Case, Christopher Linebarger, Emily Stull, and Jennifer Williams.  
            *‚ÄúSocial conflict in Africa: A new database.‚Äù* International Interactions 38, no. 4 (2012): 503‚Äì511.  
            - SCAD Dataset Explorer: [https://www.strausscenter.org/ccaps-research-areas/social-conflict/database/](https://www.strausscenter.org/ccaps-research-areas/social-conflict/database/)  

            ### Licencia y uso
            Este proyecto se ha desarrollado con fines **acad√©micos y de investigaci√≥n**.  
            Los datos pertenecen a sus respectivos autores y deben ser citados seg√∫n la referencia oficial.  

            El c√≥digo y la aplicaci√≥n est√°n orientados a promover la **transparencia**, la **reproducibilidad** y la 
            **democratizaci√≥n del conocimiento**, facilitando el acceso abierto a herramientas de an√°lisis de conflictos sociales.  

            ---
            **Contacto:**  
            Para comentarios, sugerencias o colaboraciones, no dudes en ponerte en contacto con los autores.  
            """
        )
    # =====================================================================================
    # 2. PESTA√ëA EXPLORADOR DE EVENTOS
    # =====================================================================================
elif selected == "Explorador de Eventos":
    st.header("Explorador Geogr√°fico de Eventos")
    st.caption("Distribuci√≥n total de eventos por pa√≠s con filtros esenciales y mapas coropl√©ticos profesionales.")

    # -------------------------
    # Validaci√≥n de datos
    # -------------------------
    if "df" not in st.session_state or st.session_state.df is None or st.session_state.df.empty:
        st.warning("‚ö†Ô∏è Primero carga datos en Inicio ‚Üí Datos.")
        st.stop()

    df = st.session_state.df.copy()

    # -------------------------
    # Columnas (robusto a nombres distintos)
    # -------------------------
    country_col = next((c for c in ["countryname", "country", "country_name"] if c in df.columns), None)
    if country_col is None:
        st.error("No se encontr√≥ columna de pa√≠s (se esperaba 'countryname' o 'country').")
        st.stop()

    region_col = "region" if "region" in df.columns else None
    event_type_col = next((c for c in ["event_type_label", "event_type", "type"] if c in df.columns), None)

    if "year" not in df.columns:
        st.error("No se encontr√≥ la columna 'year'.")
        st.stop()

    # Estandarizaci√≥n para visualizaciones
    rename_map = {country_col: "country_display"}
    if event_type_col:
        rename_map[event_type_col] = "event_type_display"
    df = df.rename(columns=rename_map)

    # -------------------------
    # Paleta (derivada de tu imagen) ‚Äî EVENTOS (total)
    # -------------------------
    CHORO_EVENTS = ["#b1c7df", "#23b7d9", "#1d7084"]  # claro ‚Üí cyan ‚Üí teal

    # -------------------------
    # 4 FILTROS ESENCIALES
    # -------------------------
    col_f1, col_f2, col_f3 = st.columns([1, 1.4, 1])

    # 1) Regi√≥n
    with col_f1:
        if region_col:
            region_opts = sorted(df[region_col].dropna().unique().tolist())
            selected_regions = st.multiselect(
                "Regi√≥n",
                options=region_opts,
                default=region_opts,
                key="event_regions"
            )
        else:
            selected_regions = []
            st.caption("‚ÑπÔ∏è El dataset no incluye columna de regi√≥n; se omite este filtro.")

    # 2) Pa√≠s
    with col_f2:
        if selected_regions and region_col:
            country_opts = df[df[region_col].isin(selected_regions)]["country_display"].dropna().unique()
        else:
            country_opts = df["country_display"].dropna().unique()
        selected_countries = st.multiselect(
            "Pa√≠s",
            options=sorted(country_opts),
            default=[],
            key="event_countries"
        )

    # 3) A√±os
    with col_f3:
        min_year = int(df["year"].min())
        max_year = int(df["year"].max())
        selected_years = st.slider(
            "A√±os",
            min_value=min_year,
            max_value=max_year,
            value=(min_year, max_year),
            key="event_years"
        )

    # 4) Tipo de evento
    if "event_type_display" in df.columns:
        selected_event_types = st.multiselect(
            "Tipo de evento",
            options=sorted(df["event_type_display"].dropna().unique()),
            default=[],
            key="event_event_types"
        )
    else:
        selected_event_types = []

    # -------------------------
    # Aplicar filtros (EVENTOS TOTALES)
    # -------------------------
    fdf = df.copy()
    if selected_regions and region_col:
        fdf = fdf[fdf[region_col].isin(selected_regions)]
    if selected_countries:
        fdf = fdf[fdf["country_display"].isin(selected_countries)]
    fdf = fdf[(fdf["year"] >= selected_years[0]) & (fdf["year"] <= selected_years[1])]
    if selected_event_types and "event_type_display" in fdf.columns:
        fdf = fdf[fdf["event_type_display"].isin(selected_event_types)]

    # -------------------------
    # KPIs GLOBALES (totales)
    # -------------------------
    total_events = len(fdf)
    years_text = f"{selected_years[0]}‚Äì{selected_years[1]}"
    countries_count = fdf["country_display"].nunique()
    types_count = fdf["event_type_display"].nunique() if "event_type_display" in fdf.columns else "‚Äî"

    st.markdown("### Indicadores globales")
    k1, k2, k3, k4 = st.columns(4)
    with k1:
        st.metric("Eventos (total)", f"{total_events:,}")
    with k2:
        st.metric("Pa√≠ses incluidos", countries_count)
    with k3:
        st.metric("Periodo", years_text)
    with k4:
        st.metric("Tipos de evento", types_count)

    st.divider()

    # -------------------------
    # Agregaci√≥n por pa√≠s (EVENTOS TOTALES)
    # -------------------------
    import plotly.express as px

    grp_total = fdf.groupby("country_display").size().reset_index(name="value")

    if grp_total["value"].fillna(0).sum() == 0:
        st.info("No hay eventos para los filtros actuales.")
        st.stop()

    # -------------------------
    # Helper de mapa (coropl√©tico profesional)
    # -------------------------
    def plot_map(data, title, scope, geo_kwargs=None):
        fig = px.choropleth(
            data_frame=data,
            locations="country_display",
            locationmode="country names",
            color="value",
            color_continuous_scale=CHORO_EVENTS,
            labels={"value": "Eventos (total)"},
            title=title,
            scope=scope,
            hover_name="country_display",
            hover_data={"value": ":,.0f"},
        )
        layout = dict(
            margin={"r":0, "t":46, "l":0, "b":0},
            height=540,
            coloraxis_colorbar=dict(
                title="Eventos",
                thickness=14,
                outlinewidth=0,
                tickformat=","
            ),
            font=dict(size=13),
        )
        if geo_kwargs:
            layout["geo"] = geo_kwargs
        fig.update_layout(**layout)
        st.plotly_chart(fig, use_container_width=True)

    # -------------------------
    # Mapas (√Åfrica / Am√©rica) o mundial si no hay regi√≥n
    # -------------------------
    if region_col:
        africa_df = fdf[fdf[region_col].str.lower() == "africa"].copy()
        americas_df = fdf[fdf[region_col].str.lower().isin(["latinamerica", "latin america", "americas"])].copy()

        if not africa_df.empty and not americas_df.empty:
            colA, colB = st.columns(2)
            with colA:
                dfa = africa_df.groupby("country_display").size().reset_index(name="value")
                plot_map(dfa, "√Åfrica ¬∑ Eventos (total)", scope="africa")
            with colB:
                dfam = americas_df.groupby("country_display").size().reset_index(name="value")
                plot_map(
                    dfam, "Am√©rica ¬∑ Eventos (total)", scope="world",
                    geo_kwargs=dict(
                        projection_scale=1,
                        center=dict(lat=10, lon=-80),
                        lataxis_range=[-55, 60],
                        lonaxis_range=[-130, -30],
                    )
                )
        elif not africa_df.empty:
            dfa = africa_df.groupby("country_display").size().reset_index(name="value")
            plot_map(dfa, "√Åfrica ¬∑ Eventos (total)", scope="africa")
        elif not americas_df.empty:
            dfam = americas_df.groupby("country_display").size().reset_index(name="value")
            plot_map(
                dfam, "Am√©rica ¬∑ Eventos (total)", scope="world",
                geo_kwargs=dict(
                    projection_scale=1,
                    center=dict(lat=10, lon=-80),
                    lataxis_range=[-55, 60],
                    lonaxis_range=[-130, -30],
                )
            )
        else:
            st.info("üîç No hay eventos disponibles para los filtros seleccionados.")
    else:
        # Sin columna de regi√≥n: mapa mundial
        plot_map(grp_total, "Mapa por pa√≠s ¬∑ Eventos (total)", scope="world")

    # -------------------------
    # Descarga de datos filtrados
    # -------------------------
    st.download_button(
        "‚¨áÔ∏è Descargar datos filtrados (CSV)",
        data=fdf.to_csv(index=False).encode("utf-8"),
        file_name="scad_eventos_filtrado.csv",
        mime="text/csv"
    )
    
    # =====================================================================================
    # 3. PESTA√ëA EXPLORADOR DE MUERTES
    # =====================================================================================
elif selected == "Explorador de Muertes":
    st.header("Explorador Geogr√°fico de Muertes")
    st.caption("Distribuci√≥n total de muertes por pa√≠s con filtros esenciales y mapas coropl√©ticos profesionales.")

    # -------------------------
    # Validaci√≥n de datos
    # -------------------------
    if "df" not in st.session_state or st.session_state.df is None or st.session_state.df.empty:
        st.warning("‚ö†Ô∏è Primero carga datos en Inicio ‚Üí Datos.")
        st.stop()
    df = st.session_state.df.copy()

    # -------------------------
    # Columnas (robusto a nombres distintos)
    # -------------------------
    # Pa√≠s
    country_col = next((c for c in ["countryname", "country", "country_name"] if c in df.columns), None)
    if country_col is None:
        st.error("No se encontr√≥ columna de pa√≠s (se esperaba 'countryname' o 'country').")
        st.stop()

    # Regi√≥n / Continente
    region_col = "region" if "region" in df.columns else None

    # Tipo de evento
    event_type_col = next((c for c in ["event_type_label", "event_type", "type"] if c in df.columns), None)

    # A√±o y muertes
    if "year" not in df.columns:
        st.error("No se encontr√≥ la columna 'year'.")
        st.stop()
    death_col = "ndeath" if "ndeath" in df.columns else None
    if not death_col:
        st.error("No se encontr√≥ la columna de muertes ('ndeath').")
        st.stop()

    # Estandarizaci√≥n para visualizaciones
    rename_map = {country_col: "country_display"}
    if event_type_col:
        rename_map[event_type_col] = "event_type_display"
    df = df.rename(columns=rename_map)

    # -------------------------
    # Paleta (rojos de tu paleta) ‚Äî MUERTES
    # -------------------------
    CHORO_DEATHS = ["#e78c88", "#f0493e", "#7e130f"]  # claro ‚Üí coral ‚Üí rojo suave

    # -------------------------
    # 4 FILTROS ESENCIALES (en formatos variados)
    # -------------------------
    col_f1, col_f2, col_f3 = st.columns([1, 1.4, 1])

    # 1) Regi√≥n (multiselect)
    with col_f1:
        if region_col:
            region_opts = sorted(df[region_col].dropna().unique().tolist())
            selected_regions = st.multiselect(
                "Regi√≥n",
                options=region_opts,
                default=region_opts,
                key="death_regions"
            )
        else:
            selected_regions = []
            st.caption("‚ÑπÔ∏è El dataset no incluye columna de regi√≥n; se omite este filtro.")

    # 2) Pa√≠s (multiselect condicionado por regi√≥n)
    with col_f2:
        if selected_regions and region_col:
            country_opts = df[df[region_col].isin(selected_regions)]["country_display"].dropna().unique()
        else:
            country_opts = df["country_display"].dropna().unique()
        selected_countries = st.multiselect(
            "Pa√≠s",
            options=sorted(country_opts),
            default=[],
            key="death_countries"
        )

    # 3) A√±os (range slider)
    with col_f3:
        min_year = int(df["year"].min())
        max_year = int(df["year"].max())
        selected_years = st.slider(
            "A√±os",
            min_value=min_year,
            max_value=max_year,
            value=(min_year, max_year),
            key="death_years"
        )

    # 4) Tipo de evento (multiselect)
    if "event_type_display" in df.columns:
        selected_event_types = st.multiselect(
            "Tipo de evento",
            options=sorted(df["event_type_display"].dropna().unique()),
            default=[],
            key="death_event_types"
        )
    else:
        selected_event_types = []

    # -------------------------
    # Aplicar filtros (MUERTES TOTALES)
    # -------------------------
    fdf = df.copy()
    if selected_regions and region_col:
        fdf = fdf[fdf[region_col].isin(selected_regions)]
    if selected_countries:
        fdf = fdf[fdf["country_display"].isin(selected_countries)]
    fdf = fdf[(fdf["year"] >= selected_years[0]) & (fdf["year"] <= selected_years[1])]
    if selected_event_types and "event_type_display" in fdf.columns:
        fdf = fdf[fdf["event_type_display"].isin(selected_event_types)]

    # -------------------------
    # KPIs GLOBALES (totales, sin medias)
    # -------------------------
    total_deaths = int(fdf[death_col].fillna(0).sum())
    events_with_death = int((fdf[death_col].fillna(0) > 0).sum())
    countries_count = fdf["country_display"].nunique()
    years_text = f"{selected_years[0]}‚Äì{selected_years[1]}"
    # Top pa√≠s por muertes
    top_country = (
        fdf.groupby("country_display")[death_col].sum().sort_values(ascending=False).head(1)
    )
    top_country_name = top_country.index[0] if not top_country.empty else "‚Äî"
    top_country_val = int(top_country.iloc[0]) if not top_country.empty else 0
    # M√°x muertes en un solo evento
    max_deaths_event = int(fdf[death_col].fillna(0).max()) if not fdf.empty else 0

    st.markdown("### Indicadores globales")
    k1, k2, k3, k4 = st.columns(4)
    with k1:
        st.metric("Muertes (total)", f"{total_deaths:,}")
    with k2:
        st.metric("Eventos con muertes", f"{events_with_death:,}")
    with k3:
        st.metric("Pa√≠ses incluidos", countries_count)
    with k4:
        st.metric("M√°x. en un evento", f"{max_deaths_event:,}")

    st.caption(f"üèÖ Pa√≠s con m√°s muertes: **{top_country_name}** ({top_country_val:,})")
    st.divider()

    # -------------------------
    # Agregaci√≥n por pa√≠s (MUERTES TOTALES)
    # -------------------------

    grp_deaths = fdf.groupby("country_display")[death_col].sum().reset_index(name="value")
    if grp_deaths["value"].fillna(0).sum() == 0:
        st.info("No hay muertes registradas para los filtros actuales.")
        st.stop()

    # -------------------------
    # Helper de mapa (coropl√©tico profesional)
    # -------------------------
    def plot_map(data, title, scope, geo_kwargs=None):
        fig = px.choropleth(
            data_frame=data,
            locations="country_display",
            locationmode="country names",
            color="value",
            color_continuous_scale=CHORO_DEATHS,
            labels={"value": "Muertes (total)"},
            title=title,
            scope=scope,
            hover_name="country_display",
            hover_data={"value": ":,.0f"},
        )
        layout = dict(
            margin={"r":0, "t":46, "l":0, "b":0},
            height=540,
            coloraxis_colorbar=dict(
                title="Muertes",
                thickness=14,
                outlinewidth=0,
                tickformat=","
            ),
            font=dict(size=13),
        )
        if geo_kwargs:
            layout["geo"] = geo_kwargs
        fig.update_layout(**layout)
        st.plotly_chart(fig, use_container_width=True)

    # -------------------------
    # Mapas (√Åfrica / Am√©rica) o mundial si no hay regi√≥n
    # -------------------------
    if region_col:
        africa_df = fdf[fdf[region_col].str.lower() == "africa"].copy()
        americas_df = fdf[fdf[region_col].str.lower().isin(["latinamerica", "latin america", "americas"])].copy()

        if not africa_df.empty and not americas_df.empty:
            colA, colB = st.columns(2)
            with colA:
                dfa = africa_df.groupby("country_display")[death_col].sum().reset_index(name="value")
                plot_map(dfa, "√Åfrica ¬∑ Muertes (total)", scope="africa")
            with colB:
                dfam = americas_df.groupby("country_display")[death_col].sum().reset_index(name="value")
                plot_map(
                    dfam, "Am√©rica ¬∑ Muertes (total)", scope="world",
                    geo_kwargs=dict(
                        projection_scale=1,
                        center=dict(lat=10, lon=-80),
                        lataxis_range=[-55, 60],
                        lonaxis_range=[-130, -30],
                    )
                )
        elif not africa_df.empty:
            dfa = africa_df.groupby("country_display")[death_col].sum().reset_index(name="value")
            plot_map(dfa, "√Åfrica ¬∑ Muertes (total)", scope="africa")
        elif not americas_df.empty:
            dfam = americas_df.groupby("country_display")[death_col].sum().reset_index(name="value")
            plot_map(
                dfam, "Am√©rica ¬∑ Muertes (total)", scope="world",
                geo_kwargs=dict(
                    projection_scale=1,
                    center=dict(lat=10, lon=-80),
                    lataxis_range=[-55, 60],
                    lonaxis_range=[-130, -30],
                )
            )
        else:
            st.info("üîç No hay muertes disponibles para los filtros seleccionados.")
    else:
        # Sin columna de regi√≥n: mapa mundial
        plot_map(grp_deaths, "Mapa por pa√≠s ¬∑ Muertes (total)", scope="world")

    # -------------------------
    # Descarga de datos filtrados y agregados
    # -------------------------
    cdl, cdr = st.columns(2)
    with cdl:
        st.download_button(
            "‚¨áÔ∏è Descargar filas filtradas (CSV)",
            data=fdf.to_csv(index=False).encode("utf-8"),
            file_name="scad_muertes_filtrado_rows.csv",
            mime="text/csv",
            use_container_width=True
        )
    with cdr:
        st.download_button(
            "‚¨áÔ∏è Descargar muertes por pa√≠s (CSV)",
            data=grp_deaths.to_csv(index=False).encode("utf-8"),
            file_name="scad_muertes_por_pais.csv",
            mime="text/csv",
            use_container_width=True
        )
# =====================================================================================
# 4. PESTA√ëA ESTAD√çSTICAS GENERALES
# =====================================================================================
elif selected == "Estad√≠sticas Generales":
    st.header("Estad√≠sticas Generales")
    st.caption("Indicadores globales, tendencias y distribuciones por pa√≠s y tipo de evento (totales).")

    # -------------------------
    # Validaci√≥n de datos
    # -------------------------
    if "df" not in st.session_state or st.session_state.df is None or st.session_state.df.empty:
        st.warning("‚ö†Ô∏è Primero carga datos en Inicio ‚Üí Datos.")
        st.stop()
    df = st.session_state.df.copy()

    # -------------------------
    # Columnas robustas
    # -------------------------
    country_col = next((c for c in ["countryname", "country", "country_name"] if c in df.columns), None)
    if country_col is None:
        st.error("No se encontr√≥ columna de pa√≠s (se esperaba 'countryname' o 'country').")
        st.stop()

    region_col = "region" if "region" in df.columns else None
    event_type_col = next((c for c in ["event_type_label", "event_type", "type"] if c in df.columns), None)

    if "year" not in df.columns:
        st.error("No se encontr√≥ la columna 'year'.")
        st.stop()

    death_col = "ndeath" if "ndeath" in df.columns else None

    # Estandarizaci√≥n visual
    rename_map = {country_col: "country_display"}
    if event_type_col:
        rename_map[event_type_col] = "event_type_display"
    df = df.rename(columns=rename_map)
    df["year"] = pd.to_numeric(df["year"], errors="coerce")

    # -------------------------
    # Paleta corporativa
    # -------------------------
    PALETTE = {
        "teal_dark": "#1d7084",   # eventos
        "cyan": "#23b7d9",        # eventos
        "red": "#f0635e",         # muertes
        "blue_gray": "#b1c7df",   # apoyo
        "slate": "#8094a8",
        "gray_light": "#d9dad5",
    }
    CHORO_EVENTS = ["#b1c7df", "#23b7d9", "#1d7084"]
    CHORO_DEATHS = ["#ffd9d7", "#f28b84", "#f0635e"]

    # =========================
    # BLOQUE 1 ¬∑ Filtros (esenciales + avanzados)
    # =========================
    with st.container():
        st.subheader("Filtros")

        # --- Detecci√≥n de columnas opcionales ---
        sub_event_col = next((c for c in ["sub_event_type", "sub_event_type_label", "subtype"] if c in df.columns), None)
        admin1_col     = next((c for c in ["admin1", "adm1", "admin_1"] if c in df.columns), None)
        source_col     = next((c for c in ["source", "sources"] if c in df.columns), None)
        actors_col     = next((c for c in ["actors", "actor1", "actor", "parties"] if c in df.columns), None)
        pop_col        = next((c for c in ["population", "pop", "pop_est"] if c in df.columns), None)

        # --------- Filtros ESENCIALES ----------
        col_f1, col_f2, col_f3 = st.columns([1, 1.4, 1])

        # 1) Regi√≥n
        with col_f1:
            if region_col:
                region_opts = sorted(df[region_col].dropna().unique().tolist())
                selected_regions = st.multiselect(
                    "Regi√≥n",
                    options=region_opts,
                    default=region_opts,
                    key="stats_regions"
                )
            else:
                selected_regions = []
                st.caption("‚ÑπÔ∏è El dataset no incluye columna de regi√≥n; se omite este filtro.")

        # 2) Pa√≠s
        with col_f2:
            if selected_regions and region_col:
                country_opts = df[df[region_col].isin(selected_regions)]["country_display"].dropna().unique()
            else:
                country_opts = df["country_display"].dropna().unique()
            selected_countries = st.multiselect(
                "Pa√≠s",
                options=sorted(country_opts),
                default=[],
                key="stats_countries"
            )

        # 3) A√±os
        with col_f3:
            min_year = int(df["year"].min())
            max_year = int(df["year"].max())
            selected_years = st.slider(
                "A√±os",
                min_value=min_year,
                max_value=max_year,
                value=(min_year, max_year),
                key="stats_years"
            )

        # Tipo de evento
        if "event_type_display" in df.columns:
            selected_event_types = st.multiselect(
                "Tipo de evento",
                options=sorted(df["event_type_display"].dropna().unique()),
                default=[],
                key="stats_event_types"
            )
        else:
            selected_event_types = []

       # --------- Filtros AVANZADOS (layout din√°mico sin huecos) ----------
        _active_adv = 0
        def _inc(flag): 
            return 1 if flag else 0

        # Preparar "fichas" de controles disponibles (cada item es una funci√≥n que pinta y devuelve su valor)
        adv_controls = []

        # Subtipo
        if sub_event_col:
            def _ctl_subtype():
                vals = st.multiselect(
                    "Subtipo de evento",
                    options=sorted(df[sub_event_col].dropna().unique()),
                    default=[],
                    key="stats_subtypes"
                )
                return ("selected_subtypes", vals, _inc(len(vals) > 0))
            adv_controls.append(_ctl_subtype)

        # Actor (contiene)
        def _ctl_actor():
            val = st.text_input(
                "Actor (contiene)",
                value=st.session_state.get("stats_actor_query", ""),
                key="stats_actor_query",
                help="B√∫squeda textual (no distingue may√∫sculas)."
            )
            return ("actor_query", val, _inc(bool(val.strip())))
        adv_controls.append(_ctl_actor)

        # Fuente
        if source_col:
            def _ctl_source():
                ser = df[source_col].dropna().astype(str).str.split(r"[;,]").explode().str.strip()
                opts = sorted([s for s in ser.unique().tolist() if s])
                vals = st.multiselect("Fuente", options=opts, default=[], key="stats_sources")
                return ("selected_sources", vals, _inc(len(vals) > 0))
            adv_controls.append(_ctl_source)

        # Admin1
        if admin1_col:
            def _ctl_admin1():
                if selected_countries:
                    pool = df[df["country_display"].isin(selected_countries)][admin1_col]
                elif (region_col and selected_regions):
                    pool = df[df[region_col].isin(selected_regions)][admin1_col]
                else:
                    pool = df[admin1_col]
                opts = sorted(pool.dropna().astype(str).unique().tolist())
                vals = st.multiselect("Divisi√≥n administrativa (Admin1)", options=opts, default=[], key="stats_admin1")
                return ("selected_admin1", vals, _inc(len(vals) > 0))
            adv_controls.append(_ctl_admin1)

        # Umbral m√≠nimo de muertes
        if death_col:
            def _ctl_min_deaths():
                val = st.number_input(
                    "Umbral m√≠nimo de muertes",
                    min_value=0, value=0, step=1, key="stats_min_deaths",
                    help="Filtra filas con muertes < umbral."
                )
                return ("min_deaths", val, _inc(val > 0))
            adv_controls.append(_ctl_min_deaths)

        # Top-N
        def _ctl_topn():
            val = st.number_input("Top-N pa√≠ses en rankings", min_value=5, max_value=30, value=10, step=1, key="stats_topn")
            return ("top_n", val, 0)
        adv_controls.append(_ctl_topn)

        # Suavizado temporal
        def _ctl_smooth():
            val = st.number_input(
                "Suavizado temporal (ventana rolling)",
                min_value=1, max_value=7, value=1, step=1, key="stats_smooth",
                help="Aplica media m√≥vil a series si > 1."
            )
            return ("smooth_win", val, _inc(val > 1))
        adv_controls.append(_ctl_smooth)

        # Normalizaci√≥n por poblaci√≥n
        if pop_col:
            def _ctl_normpop():
                val = st.checkbox("Normalizar por poblaci√≥n (por 100k hab.)", value=False, key="stats_norm_pop")
                if val:
                    st.caption(f"Usando columna de poblaci√≥n: **{pop_col}**")
                return ("normalize_by_pop", val, _inc(val))
            adv_controls.append(_ctl_normpop)

        # Render din√°mico en filas de 2, sin columnas vac√≠as
        values = {}
        with st.expander("‚ûï Filtros avanzados (opcionales)", expanded=False):
            for i in range(0, len(adv_controls), 2):
                row_ctls = adv_controls[i:i+2]
                cols = st.columns(len(row_ctls))
                for fn, col in zip(row_ctls, cols):
                    with col:
                        key, val, inc = fn()
                        values[key] = val
                        _active_adv += inc

        # Asignar variables para el bloque de filtros
        selected_subtypes  = values.get("selected_subtypes", [])
        actor_query        = values.get("actor_query", "")
        selected_sources   = values.get("selected_sources", [])
        selected_admin1    = values.get("selected_admin1", [])
        min_deaths         = values.get("min_deaths", 0)
        top_n              = int(values.get("top_n", 10))
        smooth_win         = int(values.get("smooth_win", 1))
        normalize_by_pop   = bool(values.get("normalize_by_pop", False))

        # Badge de estado (opcional)
        if _active_adv > 0:
            st.caption(f"üîß Filtros avanzados activos: **{_active_adv}**")

    # =========================
    # Aplicar filtros
    # =========================
    fdf = df.copy()

    # Esenciales
    if selected_regions and region_col:
        fdf = fdf[fdf[region_col].isin(selected_regions)]
    if selected_countries:
        fdf = fdf[fdf["country_display"].isin(selected_countries)]
    fdf = fdf[(fdf["year"] >= selected_years[0]) & (fdf["year"] <= selected_years[1])]
    if selected_event_types and "event_type_display" in fdf.columns:
        fdf = fdf[fdf["event_type_display"].isin(selected_event_types)]

    # Avanzados
    if sub_event_col and 'selected_subtypes' in locals() and selected_subtypes:
        fdf = fdf[fdf[sub_event_col].isin(selected_subtypes)]

    if actors_col and actor_query:
        fdf = fdf[fdf[actors_col].astype(str).str.contains(actor_query, case=False, na=False)]

    if source_col and selected_sources:
        exploded = fdf.assign(_src=fdf[source_col].astype(str).str.split(r"[;,]")).explode("_src")
        exploded["_src"] = exploded["_src"].str.strip()
        fdf = exploded[exploded["_src"].isin(selected_sources)].drop(columns=["_src"])

    if admin1_col and selected_admin1:
        fdf = fdf[fdf[admin1_col].astype(str).isin(selected_admin1)]

    if death_col and min_deaths > 0:
        fdf = fdf[fdf[death_col].fillna(0) >= min_deaths]

    # =========================
    # Helpers de visualizaci√≥n
    # =========================
    import plotly.express as px

    def _layout_pro(fig, legend=True, h=420):
        fig.update_layout(
            margin=dict(l=0, r=0, t=48, b=0),
            height=h,
            font=dict(size=13),
            legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="left", x=0) if legend else None,
        )
        return fig

    # =========================
    # BLOQUE 2 ¬∑ KPIs globales
    # =========================
    with st.container():
        st.subheader("Indicadores globales")

        # Eventos totales
        total_events = len(fdf)

        # Muertes totales
        total_deaths = int(fdf[death_col].fillna(0).sum()) if death_col else None

        # Poblaci√≥n total (si hay normalizaci√≥n)
        total_pop = None
        if normalize_by_pop and pop_col:
            # Tomamos poblaci√≥n √∫nica por pa√≠s (si la columna es por pa√≠s)
            pop_map = df[["country_display", pop_col]].drop_duplicates().dropna()
            total_pop = pop_map[pop_col].sum() if not pop_map.empty else None

        countries_count = fdf["country_display"].nunique()
        types_count = fdf["event_type_display"].nunique() if "event_type_display" in fdf.columns else "‚Äî"
        years_text = f"{selected_years[0]}‚Äì{selected_years[1]}"

        k1, k2, k3, k4 = st.columns(4)
        with k1:
            st.metric("Eventos (total)", f"{total_events:,}")
        with k2:
            st.metric("Muertes (total)", f"{total_deaths:,}" if total_deaths is not None else "‚Äî")
        with k3:
            st.metric("Pa√≠ses incluidos", countries_count)
        with k4:
            st.metric("Periodo", years_text)

        if normalize_by_pop and total_pop:
            st.caption(f"Normalizaci√≥n activa: m√©tricas ‚Äòpor 100k hab.‚Äô calculadas con poblaci√≥n total ‚âà {int(total_pop):,}")

    st.divider()

    # =========================
    # BLOQUE 3 ¬∑ Tendencias temporales (con suavizado y normalizaci√≥n opcional)
    # =========================
    with st.container():
        st.subheader("üìâ Tendencias temporales")
        col1, col2 = st.columns(2)

        # Eventos por a√±o
        with col1:
            ts_e = fdf.groupby("year").size().reset_index(name="Eventos")
            if normalize_by_pop and pop_col:
                # poblaci√≥n total aprox: suma por pa√≠ses filtrados
                pop_map = df[df["country_display"].isin(fdf["country_display"].unique())][["country_display", pop_col]].drop_duplicates().dropna()
                tot_pop = pop_map[pop_col].sum() if not pop_map.empty else None
                if tot_pop:
                    ts_e["Eventos"] = (ts_e["Eventos"] / tot_pop) * 100000
                    y_title = "Eventos por 100k hab."
                else:
                    y_title = "Eventos"
            else:
                y_title = "Eventos"

            if ts_e.empty:
                st.info("Sin datos para la tendencia de eventos.")
            else:
                if smooth_win > 1:
                    ts_e["Eventos"] = ts_e["Eventos"].rolling(smooth_win, min_periods=1).mean()
                fig = px.line(ts_e, x="year", y="Eventos", markers=True, title=f"Eventos por a√±o ({y_title})")
                fig.update_traces(line=dict(color=PALETTE["teal_dark"], width=3),
                                  marker=dict(color=PALETTE["cyan"], size=7))
                st.plotly_chart(_layout_pro(fig), use_container_width=True)

        # Muertes por a√±o
        with col2:
            if death_col:
                ts_d = fdf.groupby("year")[death_col].sum().reset_index(name="Muertes")
                if normalize_by_pop and pop_col:
                    pop_map = df[df["country_display"].isin(fdf["country_display"].unique())][["country_display", pop_col]].drop_duplicates().dropna()
                    tot_pop = pop_map[pop_col].sum() if not pop_map.empty else None
                    if tot_pop:
                        ts_d["Muertes"] = (ts_d["Muertes"] / tot_pop) * 100000
                        y_title = "Muertes por 100k hab."
                    else:
                        y_title = "Muertes"
                else:
                    y_title = "Muertes"

                if ts_d.empty or (ts_d["Muertes"].fillna(0).sum() == 0 and not normalize_by_pop):
                    st.info("Sin datos suficientes para la tendencia de muertes.")
                else:
                    if smooth_win > 1:
                        ts_d["Muertes"] = ts_d["Muertes"].rolling(smooth_win, min_periods=1).mean()
                    fig = px.line(ts_d, x="year", y="Muertes", markers=True, title=f"Muertes por a√±o ({y_title})")
                    fig.update_traces(line=dict(color=PALETTE["red"], width=3),
                                      marker=dict(color=PALETTE["red"], size=7))
                    st.plotly_chart(_layout_pro(fig), use_container_width=True)
            else:
                st.info("No hay columna de muertes en el dataset.")

    st.divider()

    # =========================
    # BLOQUE 4 ¬∑ Rankings (Top-N pa√≠ses)
    # =========================
    with st.container():
        st.subheader("üèÜ Rankings por pa√≠s")
        col3, col4 = st.columns(2)

        # Eventos
        with col3:
            rank_e = fdf.groupby("country_display").size().reset_index(name="Eventos")
            if normalize_by_pop and pop_col:
                pop_map = df[["country_display", pop_col]].drop_duplicates()
                rank_e = rank_e.merge(pop_map, on="country_display", how="left")
                rank_e["Eventos_norm"] = (rank_e["Eventos"] / rank_e[pop_col]) * 100000
                rank_e = rank_e.dropna(subset=["Eventos_norm"]).sort_values("Eventos_norm", ascending=False).head(int(top_n))
                x_col, title = "Eventos_norm", f"Top {int(top_n)} pa√≠ses ¬∑ Eventos por 100k hab."
            else:
                rank_e = rank_e.sort_values("Eventos", ascending=False).head(int(top_n))
                x_col, title = "Eventos", f"Top {int(top_n)} pa√≠ses ¬∑ Eventos (total)"

            if rank_e.empty:
                st.info("Sin datos para el ranking de eventos.")
            else:
                fig = px.bar(rank_e, x=x_col, y="country_display", orientation="h", title=title)
                fig.update_traces(marker_color=PALETTE["teal_dark"])
                fig.update_yaxes(categoryorder="total ascending", title=None)
                st.plotly_chart(_layout_pro(fig, legend=False), use_container_width=True)

        # Muertes
        with col4:
            if death_col:
                rank_d = fdf.groupby("country_display")[death_col].sum().reset_index(name="Muertes")
                if normalize_by_pop and pop_col:
                    pop_map = df[["country_display", pop_col]].drop_duplicates()
                    rank_d = rank_d.merge(pop_map, on="country_display", how="left")
                    rank_d["Muertes_norm"] = (rank_d["Muertes"] / rank_d[pop_col]) * 100000
                    rank_d = rank_d.dropna(subset=["Muertes_norm"]).sort_values("Muertes_norm", ascending=False).head(int(top_n))
                    x_col, title = "Muertes_norm", f"Top {int(top_n)} pa√≠ses ¬∑ Muertes por 100k hab."
                else:
                    rank_d = rank_d.sort_values("Muertes", ascending=False).head(int(top_n))
                    x_col, title = "Muertes", f"Top {int(top_n)} pa√≠ses ¬∑ Muertes (total)"

                if rank_d.empty or (rank_d[x_col].fillna(0).sum() == 0 and not normalize_by_pop):
                    st.info("Sin datos para el ranking de muertes.")
                else:
                    fig = px.bar(rank_d, x=x_col, y="country_display", orientation="h", title=title)
                    fig.update_traces(marker_color=PALETTE["red"])
                    fig.update_yaxes(categoryorder="total ascending", title=None)
                    st.plotly_chart(_layout_pro(fig, legend=False), use_container_width=True)
            else:
                st.info("No hay columna de muertes en el dataset.")

    st.divider()

    # =========================
    # BLOQUE 5 ¬∑ Distribuci√≥n por tipo de evento
    # =========================
    with st.container():
        st.subheader("üì¶ Distribuci√≥n por tipo de evento")
        if "event_type_display" in fdf.columns:
            dist_types = (fdf.groupby("event_type_display").size()
                          .reset_index(name="Eventos")
                          .sort_values("Eventos", ascending=False))
            if not dist_types.empty:
                fig = px.bar(dist_types, x="event_type_display", y="Eventos", title="Eventos por tipo")
                fig.update_traces(marker_color=PALETTE["cyan"])
                fig.update_xaxes(title=None)
                st.plotly_chart(_layout_pro(fig, legend=False), use_container_width=True)
            else:
                st.info("Sin datos para la distribuci√≥n por tipo.")
        else:
            st.caption("‚ÑπÔ∏è No hay columna de tipo de evento en el dataset.")

    st.divider()

    # =========================
    # BLOQUE 6 ¬∑ Heatmap (A√±o √ó Regi√≥n / Pa√≠s)
    # =========================
    with st.container():
        st.subheader("üî• Heatmap")
        if region_col:
            heat = fdf.groupby(["year", region_col]).size().reset_index(name="Eventos")
            if not heat.empty:
                fig = px.density_heatmap(
                    heat, x="year", y=region_col, z="Eventos",
                    color_continuous_scale=[PALETTE["blue_gray"], PALETTE["cyan"], PALETTE["teal_dark"]],
                    title="Eventos por a√±o y regi√≥n"
                )
                st.plotly_chart(_layout_pro(fig), use_container_width=True)
            else:
                st.info("Sin datos para el heatmap por regi√≥n.")
        else:
            # Sin regi√≥n: top-8 pa√≠ses para no saturar
            top8 = (fdf.groupby("country_display").size()
                    .sort_values(ascending=False).head(8).index.tolist())
            heat = (fdf[fdf["country_display"].isin(top8)]
                    .groupby(["year", "country_display"]).size().reset_index(name="Eventos"))
            if not heat.empty:
                fig = px.density_heatmap(
                    heat, x="year", y="country_display", z="Eventos",
                    color_continuous_scale=[PALETTE["blue_gray"], PALETTE["cyan"], PALETTE["teal_dark"]],
                    title="Eventos por a√±o y pa√≠s (top 8)"
                )
                st.plotly_chart(_layout_pro(fig), use_container_width=True)
            else:
                st.info("Sin datos para el heatmap por pa√≠s.")

    st.divider()

    # =========================
    # BLOQUE 7 ¬∑ Tabla resumen y descargas
    # =========================
    with st.container():
        st.subheader("üìÑ Resumen por pa√≠s")
        country_events = fdf.groupby("country_display").size().reset_index(name="Eventos")
        if death_col:
            country_deaths = fdf.groupby("country_display")[death_col].sum().reset_index(name="Muertes")
            summary = pd.merge(country_events, country_deaths, on="country_display", how="left")
        else:
            summary = country_events.copy()

        # Normalizaci√≥n por 100k (si procede)
        if normalize_by_pop and pop_col:
            pop_map = df[["country_display", pop_col]].drop_duplicates()
            summary = summary.merge(pop_map, on="country_display", how="left")
            summary["Eventos_100k"] = (summary["Eventos"] / summary[pop_col]) * 100000
            if "Muertes" in summary.columns:
                summary["Muertes_100k"] = (summary["Muertes"] / summary[pop_col]) * 100000

        st.dataframe(summary.sort_values(by="Eventos", ascending=False), use_container_width=True)

        cdl, cdr = st.columns(2)
        with cdl:
            st.download_button(
                "‚¨áÔ∏è Descargar filas filtradas (CSV)",
                data=fdf.to_csv(index=False).encode("utf-8"),
                file_name="scad_estadisticas_filtrado.csv",
                mime="text/csv",
                use_container_width=True
            )
        with cdr:
            st.download_button(
                "‚¨áÔ∏è Descargar resumen por pa√≠s (CSV)",
                data=summary.to_csv(index=False).encode("utf-8"),
                file_name="scad_estadisticas_resumen_pais.csv",
                mime="text/csv",
                use_container_width=True
            )

# =====================================================================================
# 5. ANALISIS POR RELIGION
# =====================================================================================
elif selected == "An√°lisis por Religi√≥n":
    st.header("An√°lisis de Conflictos Religiosos y √âtnicos")
    st.caption("Eventos identificados por palabras clave en columnas de tema (issue1_label / issue_main). Filtros: Regi√≥n y A√±os.")

    # -------------------------
    # Validaci√≥n y preparaci√≥n de columnas
    # -------------------------
    if "df" not in st.session_state or st.session_state.df is None or st.session_state.df.empty:
        st.warning("‚ö†Ô∏è Primero carga datos en Inicio ‚Üí Datos.")
        st.stop()
    df = st.session_state.df.copy()

    country_col = next((c for c in ["countryname", "country", "country_name"] if c in df.columns), None)
    if not country_col:
        st.error("No se encontr√≥ la columna de pa√≠s (p. ej., 'countryname').")
        st.stop()

    region_col = "region" if "region" in df.columns else None
    if "year" not in df.columns:
        st.error("No se encontr√≥ la columna 'year'.")
        st.stop()
    death_col = "ndeath" if "ndeath" in df.columns else None
    event_type_col = next((c for c in ["event_type_label", "event_type", "type"] if c in df.columns), None)

    # Estandarizaci√≥n m√≠nima
    rename_map = {country_col: "country_display"}
    if event_type_col:
        rename_map[event_type_col] = "event_type_display"
    df = df.rename(columns=rename_map)
    df["year"] = pd.to_numeric(df["year"], errors="coerce")

    # -------------------------
    # Paleta divergente (azules ‚Üî neutro ‚Üî rojos)
    # -------------------------
    RELIGION_SCALE = [
        "#1f77b4",  # azul fuerte
        "#1fa2e0",  # azul medio
        "#5bc0eb",  # azul claro
        "#9dd6f5",  # azul muy claro
        "#e0e0e0",  # gris neutro
        "#f4a896",  # rojo claro
        "#e76f51",  # rojo medio
        "#e63946",  # rojo intenso
        "#b81d13",  # rojo oscuro
    ]
    COLOR_EVENTS = "#1f77b4"  # barras eventos (azul fuerte)
    COLOR_RANK   = "#e63946"  # ranking pa√≠ses (rojo intenso)

    # -------------------------
    # Detecci√≥n por palabras clave (igual al original)
    # -------------------------
    if not {"issue1_label", "issue_main"}.intersection(df.columns):
        st.error("No se encontraron columnas 'issue1_label' o 'issue_main' en el dataset.")
        st.stop()

    religion_keywords = [
        "religio", "ethnic", "√©tnico", "identidad", "discriminaci√≥n", "discrimination",
        "muslim", "cristian", "christian", "islam", "hindu", "jew", "jud√≠o"
    ]
    regex = "|".join(religion_keywords)

    mask = pd.Series(False, index=df.index)
    if "issue1_label" in df.columns:
        mask = mask | df["issue1_label"].astype(str).str.contains(regex, case=False, na=False)
    if "issue_main" in df.columns:
        mask = mask | df["issue_main"].astype(str).str.contains(regex, case=False, na=False)

    religion_df = df[mask].copy()
    st.info(f"Se encontraron **{len(religion_df):,}** eventos relacionados con religi√≥n o identidad √©tnica.")

    if religion_df.empty:
        st.warning("No se encontraron eventos con temas religiosos en el dataset actual.")
        st.stop()

    # -------------------------
    # Filtros ESENCIALES (solo Regi√≥n y A√±os)
    # -------------------------
    st.subheader("Filtros")
    col_r1, col_r2 = st.columns(2)

    with col_r1:
        if region_col:
            region_opts = sorted(religion_df[region_col].dropna().unique().tolist())
            religion_regions = st.multiselect(
                "Regi√≥n",
                options=region_opts,
                default=region_opts,
                key="religion_region"
            )
        else:
            religion_regions = []
            st.caption("‚ÑπÔ∏è El dataset no incluye columna de regi√≥n; se omite este filtro.")

    with col_r2:
        min_year = int(religion_df["year"].min())
        max_year = int(religion_df["year"].max())
        religion_years = st.slider(
            "A√±os",
            min_value=min_year,
            max_value=max_year,
            value=(min_year, max_year),
            key="religion_years"
        )

    # Aplicar filtros
    fdf = religion_df.copy()
    if religion_regions and region_col:
        fdf = fdf[fdf[region_col].isin(religion_regions)]
    fdf = fdf[(fdf["year"] >= religion_years[0]) & (fdf["year"] <= religion_years[1])]

    # -------------------------
    # KPIs globales (totales)
    # -------------------------
    st.subheader("Resumen")
    k1, k2, k3 = st.columns(3)
    with k1:
        st.metric("Eventos religiosos/√©tnicos", f"{len(fdf):,}")
    with k2:
        if death_col:
            st.metric("Muertes totales", f"{int(fdf[death_col].fillna(0).sum()):,}")
        else:
            st.metric("Muertes totales", "‚Äî")
    with k3:
        st.metric("Pa√≠ses involucrados", fdf["country_display"].nunique())

    st.divider()

    # -------------------------
    # GR√ÅFICO 1 ¬∑ Eventos por a√±o (barras azules)
    # -------------------------
    import plotly.express as px

    st.subheader("üïå Eventos religiosos/√©tnicos por a√±o")
    by_year = fdf.groupby("year").size().reset_index(name="Eventos")
    if by_year.empty:
        st.info("Sin datos para la serie temporal.")
    else:
        fig_year = px.bar(by_year, x="year", y="Eventos", title="Eventos por a√±o")
        fig_year.update_traces(marker_color=COLOR_EVENTS)
        fig_year.update_layout(margin=dict(l=0, r=0, t=48, b=0), height=420, font=dict(size=13))
        st.plotly_chart(fig_year, use_container_width=True)

    # -------------------------
    # GR√ÅFICO 2 ¬∑ Distribuci√≥n por tema (pie con escala diverging)
    # -------------------------
    st.subheader("üìå Temas religiosos/√©tnicos")
    if "issue1_label" in fdf.columns:
        topics = fdf["issue1_label"].dropna().value_counts().reset_index()
        topics.columns = ["Tema", "Eventos"]
        if topics.empty:
            st.info("Sin datos para la distribuci√≥n por tema.")
        else:
            fig_topics = px.pie(
                topics.head(12),
                values="Eventos",
                names="Tema",
                title="Distribuci√≥n por tema (Top 12)",
                color_discrete_sequence=RELIGION_SCALE
            )
            fig_topics.update_layout(margin=dict(l=0, r=0, t=48, b=0), height=420, font=dict(size=13), legend_title_text="")
            st.plotly_chart(fig_topics, use_container_width=True)
    else:
        st.caption("‚ÑπÔ∏è No hay columna 'issue1_label' para la distribuci√≥n por tema.")

    # -------------------------
    # GR√ÅFICO 3 ¬∑ Top pa√≠ses (barra horizontal roja)
    # -------------------------
    st.subheader("üß≠ Top pa√≠ses por conflictos religiosos/√©tnicos")
    top_countries = (
        fdf.groupby("country_display").size()
          .reset_index(name="Eventos")
          .sort_values("Eventos", ascending=False)
          .head(10)
    )
    if top_countries.empty:
        st.info("Sin datos para el ranking por pa√≠s.")
    else:
        fig_countries = px.bar(
            top_countries, x="Eventos", y="country_display",
            orientation="h", title="Top 10 pa√≠ses por eventos"
        )
        fig_countries.update_traces(marker_color=COLOR_RANK)
        fig_countries.update_yaxes(categoryorder="total ascending", title=None)
        fig_countries.update_layout(margin=dict(l=0, r=0, t=48, b=0), height=460, font=dict(size=13))
        st.plotly_chart(fig_countries, use_container_width=True)

    st.divider()

    # -------------------------
    # Tabla de detalle
    # -------------------------
    st.subheader("üìã Datos detallados")
    cols_show = [c for c in ["year", "country_display", "event_type_display", "issue1_label", "ndeath", "actor1", "target1"] if c in fdf.columns]
    if not cols_show:
        cols_show = fdf.columns.tolist()[:8]
    st.dataframe(fdf[cols_show].reset_index(drop=True), use_container_width=True)

# =====================================================================================
# 6. PESTA√ëA
# =====================================================================================
elif selected == "Conclusiones":
    st.header("Conclusiones")
    st.caption("An√°lisis del Social Conflict Analysis Database (SCAD), 1990‚Äì2018. Cobertura: √Åfrica subsahariana y Am√©rica Latina.")

    st.markdown("""
    El an√°lisis del dataset SCAD permite identificar patrones estructurales, tendencias temporales y din√°micas geogr√°ficas en los conflictos sociales y pol√≠ticos registrados entre 1990 y 2018. A continuaci√≥n se presentan hallazgos organizados en ejes tem√°ticos fundamentales, basados en la codificaci√≥n sistem√°tica de actores, causas, tipos de violencia y localizaci√≥n de los eventos.
    """)

    st.subheader("1. Tendencias temporales: picos de conflicto y sus contextos hist√≥ricos")
    st.markdown("""
    El dataset revela varios picos significativos de actividad conflictiva, estrechamente vinculados a procesos pol√≠ticos, econ√≥micos o de seguridad:

    - **1994‚Äì1996**: Aumento notable de eventos en Hait√≠, Rep√∫blica Dominicana y Sud√°frica. En Hait√≠, la transici√≥n post-dictadura y la intervenci√≥n internacional generaron represi√≥n estatal y violencia comunitaria. En Sud√°frica, persistieron tensiones √©tnicas (xhosas vs. sothos) en el periodo posterior al fin del apartheid.
    
    - **2000‚Äì2003**: Pico en Sierra Leona, Liberia y Costa de Marfil, coincidente con el colapso de acuerdos de paz y el resurgimiento de conflictos post-guerra civil. En Costa de Marfil, las protestas de jueces por salarios (2002) reflejan la fragilidad institucional previa al estallido de la guerra civil.

    - **2010‚Äì2012**: M√°ximo hist√≥rico de eventos en el conjunto del dataset. Este periodo incluye:
        - La **crisis post-electoral en Costa de Marfil** (2010‚Äì2011), con cientos de muertos.
        - La **insurgencia en el norte de Mal√≠** (2012), tras el golpe de Estado y la expansi√≥n de grupos yihadistas.
        - El **auge de la violencia criminal en M√©xico**, especialmente en Ciudad Ju√°rez, con masacres como la del Casino Royale (52 muertos en 2011) o los ataques a fiestas privadas (2010‚Äì2011).

    - **2015‚Äì2017**: Persistencia de violencia en M√©xico y surgimiento de nuevos focos en el Sahel (N√≠ger, Chad) y el Cuerno de √Åfrica (Somalia, Etiop√≠a), vinculados a la expansi√≥n de Al-Shabaab y tensiones por recursos h√≠dricos y ganaderos.

    Estos picos no son aleatorios: reflejan **transiciones pol√≠ticas fr√°giles, vac√≠os de poder estatal y choques entre identidades colectivas** en contextos de debilidad institucional.
    """)

    st.subheader("2. Distribuci√≥n geogr√°fica: pa√≠ses y regiones con mayor incidencia")
    st.markdown("""
    El dataset est√° fuertemente concentrado en unos pocos pa√≠ses, lo que refleja tanto la intensidad del conflicto como la cobertura medi√°tica:

    - **M√©xico** es, con diferencia, el pa√≠s con m√°s eventos en Am√©rica Latina (m√°s del 95% de los casos regionales). La violencia se concentra en estados como **Chihuahua (Ciudad Ju√°rez), Sinaloa, Tamaulipas y Guerrero**, y est√° dominada por actores no estatales (c√°rteles, autodefensas, pandillas).

    - En **√Åfrica**, los pa√≠ses con mayor n√∫mero de eventos son:
        - **Nigeria**: por disputas √©tnico-religiosas (norte vs. sur), violencia del MEND en el Delta del N√≠ger y ataques de Boko Haram (aunque este √∫ltimo rara vez se nombra expl√≠citamente).
        - **Sud√°n y Sud√°n del Sur**: por conflictos √©tnicos (dinka vs. nuer), disputas por ganado y recursos petroleros.
        - **Costa de Marfil**: por tensiones post-coloniales entre "nativos" y migrantes, exacerbadas en periodos electorales.
        - **Somalia y Etiop√≠a**: por inestabilidad estatal, presencia de Al-Shabaab y conflictos transfronterizos.

    La ausencia de pa√≠ses como Brasil, Colombia o Argentina no indica ausencia de conflicto, sino que el SCAD est√° dise√±ado para monitorear contextos de **alta fragilidad estatal**, no protestas en democracias consolidadas.
    """)

    st.subheader("3. Tipolog√≠a de eventos: formas y motivaciones predominantes")
    st.markdown("""
    El SCAD clasifica los eventos en categor√≠as que permiten distinguir entre protesta pol√≠tica, violencia criminal y conflicto comunitario:

    - **Manifestaciones y huelgas (no letales)**: Constituyen la mayor√≠a de los eventos en √Åfrica. Incluyen protestas de jueces (Costa de Marfil, 2002), estudiantes (Rep√∫blica Dominicana, 1995), vendedores ambulantes (Santo Domingo, 1999) o comunidades por apagones el√©ctricos (2002‚Äì2003). Estos eventos suelen tener demandas concretas y actores identificables.

    - **Violencia letal no estatal**: Predomina en M√©xico y partes del Sahel. Incluye:
        - Ejecuciones masivas en fiestas privadas (Ciudad Ju√°rez, 2010‚Äì2011).
        - Ataques a periodistas (Juchit√°n, 2016).
        - Masacres en c√°rceles (Matamoros, 2010).
        - Descuartizamientos y mensajes con cuerpos (San Quint√≠n, 2015).
        Estos eventos rara vez tienen una causa pol√≠tica expl√≠cita y se clasifican como "unknown/not specified".

    - **Violencia comunitaria**: Muy presente en √Åfrica. Incluye:
        - Linchamientos por rumores (Senegal, 1997: "encogimiento de genitales").
        - Enfrentamientos √©tnicos (Sud√°frica, 1996: xhosas vs. sothos).
        - Disputas por recursos (Sud√°n, 2007: 1,800 muertos en choques por ganado).
        Estos eventos reflejan la debilidad del Estado y la persistencia de mecanismos de justicia comunitaria.

    - **Represi√≥n estatal**: Documentada en Hait√≠ (1994‚Äì1996), Egipto (2013) y Cuba. Incluye redadas policiales, quemas de casas y detenciones arbitrarias, generalmente en respuesta a protestas o movimientos opositores.
    """)

    st.subheader("4. Causas subyacentes: motores estructurales del conflicto")
    st.markdown("""
    A pesar de la diversidad de eventos, es posible agrupar las causas en cuatro categor√≠as fundamentales:

    - **Recursos y subsistencia**: Disputas por tierras, ganado, agua, electricidad o empleo. Son la causa m√°s recurrente en zonas rurales de √Åfrica y en barrios marginados de Am√©rica Latina.

    - **Identidad colectiva**: Conflictos √©tnicos, religiosos o nacionales. Aparecen de forma persistente en Nigeria, Sud√°n, Costa de Marfil y Sud√°frica, y suelen escalar en periodos de transici√≥n pol√≠tica.

    - **Gobernanza y legitimidad**: Elecciones, corrupci√≥n, impunidad y represi√≥n. Los periodos electorales act√∫an como catalizadores en contextos de desconfianza institucional (Costa de Marfil 2010, Togo 2012).

    - **Crimen organizado**: En M√©xico, la violencia se articula en torno al tr√°fico de drogas, el control territorial y la imposici√≥n de normas paralelas al Estado. La opacidad de estos actores lleva a una alta proporci√≥n de eventos clasificados como "desconocidos".
    """)

    st.subheader("5. Implicaciones metodol√≥gicas y limitaciones")
    st.markdown("""
    El SCAD es una herramienta valiosa, pero est√° sujeto a sesgos inherentes a su metodolog√≠a:

    - **Sesgo de visibilidad**: Los eventos dependen de la cobertura de agencias internacionales (AP, AFP, Reuters), lo que puede subrepresentar zonas remotas o conflictos de baja intensidad.
    
    - **Subregistro de violencia estructural**: Formas de violencia como la dom√©stica, la de g√©nero o la econ√≥mica sist√©mica no aparecen, ya que el SCAD se centra en eventos colectivos y p√∫blicos.

    - **Dificultad de atribuci√≥n**: En contextos de criminalidad organizada o insurgencia difusa, la identificaci√≥n precisa de actores y motivaciones es frecuentemente imposible, lo que lleva a categor√≠as gen√©ricas como "desconocido" o "no especificado".

    Estas limitaciones no invalidan el dataset, pero s√≠ exigen cautela al generalizar sus hallazgos.
    """)

    st.subheader("6. Reflexi√≥n final")
    st.markdown("""
    Los conflictos sociales no son meros brotes de caos, sino expresiones de demandas, frustraciones y disputas por el poder, la identidad y los recursos. El SCAD, al registrar desde huelgas judiciales hasta masacres en fiestas privadas, captura la complejidad de estas din√°micas en contextos de fragilidad estatal. Comprenderlas en su diversidad ‚Äîtemporal, geogr√°fica y tem√°tica‚Äî es esencial para dise√±ar pol√≠ticas de prevenci√≥n y resoluci√≥n de conflictos contextualizadas, efectivas y sostenibles.
    """)